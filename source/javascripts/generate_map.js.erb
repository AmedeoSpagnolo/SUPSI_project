
$( document ).ready(function() {


  $('#currentsign').html(app.sign)
  
  var current_svg = "../image/" + app.sign + ".svg"

  var dataset = createdataset()

  // 
  // render map
  //
  var datamap = new Datamap({
    element: document.getElementById('map_container'),
    projection: 'mercator', // big world map
    data: dataset,
    responsive: true,
    fills: { 
      defaultFill: 'lightgrey',
      'bubbles': 'yellow' 
    },
    geographyConfig: {
      borderWidth: 1,
      borderColor: 'white',
      highlightOnHover: false,
      popupOnHover: false,
      // popupTemplate: function(geo, datamap) {
      //     if (!datamap) { return ; }
      //     return ['<div class="hoverinfo">',
      //         '<strong>', geo.properties.name, '</strong>',
      //         '<br>Count: <strong>', datamap.numberOfThings, '</strong>',
      //         '</div>'].join('');
      // }
    },
     bubblesConfig: {
        borderWidth: 0,
        popupOnHover: true, // True to show the popup while hovering
        fillOpacity: 1,
        popupTemplate: function(geography, data) { // This function should just return a string
          return '<div class="hoverinfo"><strong>' + data.countryLong + '</strong></div>';
        },
      }


  })

  $(window).on('resize', function(){
    datamap.resize()
  })

  datamap.bubbles(create_bubbles(dataset));
  drawLines()

  // _.forEach(a in $('.country_text'))
})

 
var centrObj = {}
  centroids.forEach(function(c){
    centrObj[c.country] = c
})
function create_bubbles(dataset){
  var bubbleArray = [];
  var newdata = _.sortBy(dataset, function(d) { return d.affinityValue; });
  var newdataDesc = _.reverse(newdata);
  var i = 0;

  var affinityScale = d3.scale.linear()
    .domain([45, 95])
    .range([0, $('.info_country_list').width()]);

  newdata.forEach(function(d) {
    if (i <= 10 && centrObj[d.country]){
      bubbleArray.push({
        'latitude': centrObj[d.country].lat,
        'longitude': centrObj[d.country].lng,
        'radius' : d.radius,
        'fillKey': 'bubbles',
        'country': centrObj[d.country].fips,
        'countryLong': centrObj[d.country].country,
        'depth': d.depth
      });                
    }
    else if (i > 10 && centrObj[d.country]){
      bubbleArray.push({
        'latitude': centrObj[d.country].lat,
        'longitude': centrObj[d.country].lng,
        'radius' : 2,
        'fillKey': 'bubbles',
        'country': centrObj[d.country].fips,
        'countryLong': centrObj[d.country].country,
        'depth': d.depth
      });
    }
    i++;
    if (centrObj[d.country]){
    $('#country_list').append('<div class="country_text" row between-center><span id="'+ centrObj[d.country].fips +'T">'
         + centrObj[d.country].country +
          '</span><div style="width:' + (affinityScale(d.affinityValue) - 20)/4 + 'px; height: 5px; opacity: 0.60; background-color: grey;" id="'+ centrObj[d.country].fips +'C"></div></div>');
    var id = '#' + centrObj[d.country].fips +'T'
    }   
  })

  return bubbleArray;
}

function drawLines(){
  _.forEach(constellations[app.sign], function(l){
    var country1 = '#' + centrObj[l[0]].fips
    var country2 = '#' + centrObj[l[1]].fips
    var star1X = $(country1).attr('cx')
    var star1Y = $(country1).attr('cy')
    var star2X = $(country2).attr('cx')
    var star2Y = $(country2).attr('cy')   
    // console.log(country1, star1X, star1Y, country2, star2X, star2Y);
    d3.select('.bubbles')
    .append("line")          // attach a line
    .style("stroke", "black")  // colour the line
    .attr("x1", star1X)     // x position of the first end of the line
    .attr("y1", star1Y)      // y position of the first end of the line
    .attr("x2", star2X)     // x position of the second end of the line
    .attr("y2", star2Y)    // y position of the second end of the line
    .attr("depth", 10);
  });

}

var minValue = 0;
var maxValue = 0;
function createdataset(){
    
    var series = []

    <% data.countryscope.countries.each do |iter| %>
      <% data.countryscope.countries[iter[0]].each do |country| %>
        series.push([
          '<%= data.country_codes["#{country[:place]}"] %>', 
          app.affinity['<%= iter[0] %>'][app.sign],
          "<%= country[:place]%>"
        ])
      <% end %>
    <% end %>


    var dataset = {};

    var onlyValues = series.map(function(obj){ return obj[1]; });
    minValue = Math.min.apply(null, onlyValues);
    maxValue = Math.max.apply(null, onlyValues);
    // create color palette function
    // color can be whatever you wish
    var paletteScale = d3.scale.linear()
            .domain([minValue,maxValue])
            .range(["#d3d3d3","#02386F"]); // blue color

    // var radiusScale = d3.scale.linear()
    //         .domain([minValue,maxValue])
    //         .range([1, 5]);
    
    var radiusScale = d3.scale.quantize()
    .domain([minValue,maxValue])
    .range([0, 5]);

    var depthScale = d3.scale.linear()
    .domain([minValue,maxValue])
    .range([0, 10]);

    // fill dataset in appropriate format
    series.forEach(function(item){ //
        // item example value ["USA", 70]
        
        var iso = item[0],
            value = item[1],
            country = item[2];
        dataset[iso] = { 
          numberOfThings: value, 
          fillColor: paletteScale(value), 
          country: country, 
          radius: radiusScale(value),
          affinityValue: value,
          depth: depthScale(value)
        }

    });
    return dataset
}
